import { useDispatch, useSelector } from 'react-redux';
import { useEffect } from 'react';
import { motion } from 'framer-motion';
import { purchaseUpgrade, activateBonus, deactivateBonus, BASE_UPGRADE_LIMITS } from '@/features/clicker/clickerSlice';
import styles from '@/styles/components/Upgrades.module.scss';

const upgrades = [
    {
        id: 'microphone',
        name: '–ú—ñ–∫—Ä–æ—Ñ–æ–Ω',
        description: '–î–æ–¥–∞—î +1 –Ω–æ—Ç—É –∑–∞ –∫–ª—ñ–∫',
        icon: 'üé§'
    },
    {
        id: 'drums',
        name: '–ë–∞—Ä–∞–±–∞–Ω–∏',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î 1 –Ω–æ—Ç—É –≤ —Å–µ–∫—É–Ω–¥—É',
        icon: 'ü•Å'
    },
    {
        id: 'synthesizer',
        name: '–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä',
        description: '–ü–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥ 5 –Ω–æ—Ç –≤ —Å–µ–∫—É–Ω–¥—É',
        icon: 'üéπ'
    },
    {
        id: 'amplifier',
        name: '–ü—ñ–¥—Å–∏–ª—é–≤–∞—á',
        description: 'x2 –¥–æ—Ö—ñ–¥ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥',
        icon: 'üîä'
    },
    {
        id: 'tour',
        name: '–¢—É—Ä',
        description: 'x5 –¥–æ—Ö—ñ–¥ –Ω–∞ 10 –∫–ª—ñ–∫—ñ–≤',
        icon: 'üé∏'
    }
];

const Upgrades = () => {
    const dispatch = useDispatch();
    const { notes, upgrades: gameUpgrades, activeBonuses } = useSelector(state => state.clicker);
    const grammys = useSelector(state => state.clicker.grammys);

    const handlePurchase = (upgradeId) => {
        dispatch(purchaseUpgrade({ upgradeType: upgradeId }));
    };

    const handleActivateBonus = (bonusId) => {
        dispatch(activateBonus({ bonusType: bonusId }));
    };

    useEffect(() => {
        let timer;
        if (activeBonuses.amplifier) {
            timer = setTimeout(() => {
                dispatch(deactivateBonus({ bonusType: 'amplifier' }));
            }, 30000);
        }
        return () => clearTimeout(timer);
    }, [activeBonuses.amplifier, dispatch]);

    return (
        <div className={styles.upgrades}>
            <h2>–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è</h2>
            <div className={styles.upgradesGrid}>
                {upgrades.map((upgrade) => {
                    const maxLevel = BASE_UPGRADE_LIMITS[upgrade.id] * Math.max(1, Math.pow(2, grammys));
                    const currentLevel = gameUpgrades[upgrade.id].level;
                    const isMax = currentLevel >= maxLevel;
                    return (
                        <motion.div
                            key={upgrade.id}
                            className={styles.upgradeCard}
                            whileHover={{ scale: 1.03 }}
                            whileTap={{ scale: 0.95 }}
                        >
                            <div className={styles.upgradeIcon}>{upgrade.icon}</div>
                            <h3>{upgrade.name}</h3>
                            <p>{upgrade.description}</p>
                            <div>–†—ñ–≤–µ–Ω—å: {currentLevel} / {maxLevel}</div>
                            {isMax && (
                                <div style={{ color: '#e74c3c', fontWeight: 500, margin: '0.5rem 0' }}>
                                    –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º—É! –û—Ç—Ä–∏–º–∞–π—Ç–µ —â–µ –æ–¥–Ω—É –ì—Ä–µ–º–º—ñ, —â–æ–± –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç.
                                </div>
                            )}
                            <div className={styles.upgradeStats}>
                                <span>–í–∞—Ä—Ç—ñ—Å—Ç—å: {gameUpgrades[upgrade.id].cost} –Ω–æ—Ç</span>
                                <button
                                    onClick={() => handlePurchase(upgrade.id)}
                                    disabled={notes < gameUpgrades[upgrade.id].cost || isMax}
                                >
                                    –ö—É–ø–∏—Ç–∏
                                </button>
                            </div>
                            {upgrade.id === 'microphone' && (
                                <div style={{ fontSize: '0.85rem', color: '#888' }}>
                                    –ö–æ–∂–Ω–∞ –ì—Ä–µ–º–º—ñ –ø–æ–¥–≤–æ—é—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å!
                                </div>
                            )}
                            {(upgrade.id === 'amplifier' || upgrade.id === 'tour') && (
                                <button
                                    onClick={() => handleActivateBonus(upgrade.id)}
                                    className={styles.activateButton}
                                >
                                    –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏
                                </button>
                            )}
                        </motion.div>
                    );
                })}
            </div>
        </div>
    );
};

export default Upgrades; 